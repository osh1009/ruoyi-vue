{"remainingRequest":"E:\\workSpace\\RuoYi-Vue\\ruoyi-ui\\node_modules\\babel-loader\\lib\\index.js!E:\\workSpace\\RuoYi-Vue\\ruoyi-ui\\node_modules\\quill\\core\\quill.js","dependencies":[{"path":"E:\\workSpace\\RuoYi-Vue\\ruoyi-ui\\node_modules\\quill\\core\\quill.js","mtime":1734253479561},{"path":"E:\\workSpace\\RuoYi-Vue\\ruoyi-ui\\babel.config.js","mtime":1734161096606},{"path":"E:\\workSpace\\RuoYi-Vue\\ruoyi-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1734253476057},{"path":"E:\\workSpace\\RuoYi-Vue\\ruoyi-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1734253476301}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["_lodashEs","require","Parchment","_interopRequireWildcard","exports","_quillDelta","_interopRequireDefault","_editor","_emitter","_instances","_logger","_module","_selection","_composition","_theme","_scrollRectIntoView2","_createRegistryWithFormats","_excluded","_excluded2","debug","logger","globalRegistry","Registry","ParentBlot","uiClass","Quill","default","container","_this","_classCallCheck2","options","arguments","length","undefined","expandConfig","error","html","innerHTML","trim","classList","add","instances","set","root","addContainer","emitter","Emitter","scrollBlotName","ScrollBlot","blotName","registry","query","Error","concat","scroll","editor","Editor","selection","Selection","composition","Composition","theme","keyboard","addModule","clipboard","history","uploader","init","on","events","EDITOR_CHANGE","type","TEXT_CHANGE","toggle","isBlank","SCROLL_UPDATE","source","mutations","oldRange","lastRange","_this$selection$getRa","getRange","_this$selection$getRa2","_slicedToArray2","newRange","selectionInfo","modify","call","update","SCROLL_EMBED_UPDATE","blot","delta","_this$selection$getRa3","_this$selection$getRa4","change","Delta","retain","offset","_defineProperty2","statics","sources","USER","contents","convert","text","setContents","clear","placeholder","setAttribute","readOnly","disable","allowReadOnlyEdits","_createClass2","key","value","refNode","className","document","createElement","insertBefore","blur","setRange","deleteText","index","_this2","_overload","overload","_overload2","enable","editReadOnly","modifier","enabled","focus","preventScroll","scrollSelectionIntoView","format","name","_this3","API","range","getSelection","Scope","BLOCK","formatLine","formatText","setSelection","SILENT","_this4","formats","_overload3","_overload4","_this5","_overload5","_overload6","getBounds","bounds","containerBounds","getBoundingClientRect","bottom","top","height","left","right","width","getContents","getLength","_overload7","_overload8","getFormat","getIndex","getLeaf","leaf","getLine","line","getLines","Number","MAX_VALUE","lines","getModule","modules","getSemanticHTML","_length","_overload9","_overload10","getHTML","getText","_length2","_overload11","_overload12","hasFocus","insertEmbed","embed","_this6","insertText","_this7","_overload13","_overload14","isEnabled","off","_this$emitter","apply","_this$emitter2","once","_this$emitter3","removeFormat","_this8","_overload15","_overload16","scrollRectIntoView","rect","scrollIntoView","console","warn","_this9","delete1","applied","insertContents","delete2","compose","_overload17","_overload18","Range","Math","max","setText","insert","updateContents","_this10","applyDelta","limit","level","find","node","bubble","get","import","imports","register","_this11","target","overwrite","attrName","Object","keys","forEach","path","startsWith","parchment","Module","Theme","resolveSelector","selector","querySelector","expandModuleConfig","config","entries","reduce","expanded","_ref","_ref3","_objectSpread4","omitUndefinedValuesFromOptions","obj","fromEntries","filter","entry","containerOrSelector","shouldUseDefaultTheme","DEFAULTS","_Quill$DEFAULTS","quillModuleDefaults","quillDefaults","_objectWithoutProperties2","_theme$DEFAULTS","themeModuleDefaults","themeDefaults","userModuleOptions","toolbar","constructor","merge","createRegistryWithFormats","modulesWithDefaults","_ref2","_ref4","moduleClass","shift","oldDelta","shiftRange","_this$emitter4","args","emit","_this$emitter5","_typeof2","lengthOrSource","start","end","transformPosition","_map","map","pos","_map2","_map3","_map4"],"sources":["../../src/core/quill.ts"],"sourcesContent":["import { merge } from 'lodash-es';\nimport * as Parchment from 'parchment';\nimport type { Op } from 'quill-delta';\nimport Delta from 'quill-delta';\nimport type { BlockEmbed } from '../blots/block.js';\nimport type Block from '../blots/block.js';\nimport type Scroll from '../blots/scroll.js';\nimport type Clipboard from '../modules/clipboard.js';\nimport type History from '../modules/history.js';\nimport type Keyboard from '../modules/keyboard.js';\nimport type Uploader from '../modules/uploader.js';\nimport Editor from './editor.js';\nimport Emitter from './emitter.js';\nimport type { EmitterSource } from './emitter.js';\nimport instances from './instances.js';\nimport logger from './logger.js';\nimport type { DebugLevel } from './logger.js';\nimport Module from './module.js';\nimport Selection, { Range } from './selection.js';\nimport type { Bounds } from './selection.js';\nimport Composition from './composition.js';\nimport Theme from './theme.js';\nimport type { ThemeConstructor } from './theme.js';\nimport scrollRectIntoView from './utils/scrollRectIntoView.js';\nimport type { Rect } from './utils/scrollRectIntoView.js';\nimport createRegistryWithFormats from './utils/createRegistryWithFormats.js';\n\nconst debug = logger('quill');\n\nconst globalRegistry = new Parchment.Registry();\nParchment.ParentBlot.uiClass = 'ql-ui';\n\n/**\n * Options for initializing a Quill instance\n */\nexport interface QuillOptions {\n  theme?: string;\n  debug?: DebugLevel | boolean;\n  registry?: Parchment.Registry;\n  /**\n   * Whether to disable the editing\n   * @default false\n   */\n  readOnly?: boolean;\n\n  /**\n   * Placeholder text to display when the editor is empty\n   * @default \"\"\n   */\n  placeholder?: string;\n  bounds?: HTMLElement | string | null;\n  modules?: Record<string, unknown>;\n\n  /**\n   * A list of formats that are recognized and can exist within the editor contents.\n   * `null` means all formats are allowed.\n   * @default null\n   */\n  formats?: string[] | null;\n}\n\n/**\n * Similar to QuillOptions, but with all properties expanded to their default values,\n * and all selectors resolved to HTMLElements.\n */\nexport interface ExpandedQuillOptions\n  extends Omit<QuillOptions, 'theme' | 'formats'> {\n  theme: ThemeConstructor;\n  registry: Parchment.Registry;\n  container: HTMLElement;\n  modules: Record<string, unknown>;\n  bounds?: HTMLElement | null;\n  readOnly: boolean;\n}\n\nclass Quill {\n  static DEFAULTS = {\n    bounds: null,\n    modules: {\n      clipboard: true,\n      keyboard: true,\n      history: true,\n      uploader: true,\n    },\n    placeholder: '',\n    readOnly: false,\n    registry: globalRegistry,\n    theme: 'default',\n  } satisfies Partial<QuillOptions>;\n  static events = Emitter.events;\n  static sources = Emitter.sources;\n  static version = typeof QUILL_VERSION === 'undefined' ? 'dev' : QUILL_VERSION;\n\n  static imports: Record<string, unknown> = {\n    delta: Delta,\n    parchment: Parchment,\n    'core/module': Module,\n    'core/theme': Theme,\n  };\n\n  static debug(limit: DebugLevel | boolean) {\n    if (limit === true) {\n      limit = 'log';\n    }\n    logger.level(limit);\n  }\n\n  static find(node: Node, bubble = false) {\n    return instances.get(node) || globalRegistry.find(node, bubble);\n  }\n\n  static import(name: 'core/module'): typeof Module;\n  static import(name: `themes/${string}`): typeof Theme;\n  static import(name: 'parchment'): typeof Parchment;\n  static import(name: 'delta'): typeof Delta;\n  static import(name: string): unknown;\n  static import(name: string) {\n    if (this.imports[name] == null) {\n      debug.error(`Cannot import ${name}. Are you sure it was registered?`);\n    }\n    return this.imports[name];\n  }\n\n  static register(\n    targets: Record<\n      string,\n      | Parchment.RegistryDefinition\n      | Record<string, unknown> // any objects\n      | Theme\n      | Module\n      | Function // ES5 constructors\n    >,\n    overwrite?: boolean,\n  ): void;\n  static register(\n    target: Parchment.RegistryDefinition,\n    overwrite?: boolean,\n  ): void;\n  static register(path: string, target: any, overwrite?: boolean): void;\n  static register(...args: any[]): void {\n    if (typeof args[0] !== 'string') {\n      const target = args[0];\n      const overwrite = !!args[1];\n\n      const name = 'attrName' in target ? target.attrName : target.blotName;\n      if (typeof name === 'string') {\n        // Shortcut for formats:\n        // register(Blot | Attributor, overwrite)\n        this.register(`formats/${name}`, target, overwrite);\n      } else {\n        Object.keys(target).forEach((key) => {\n          this.register(key, target[key], overwrite);\n        });\n      }\n    } else {\n      const path = args[0];\n      const target = args[1];\n      const overwrite = !!args[2];\n\n      if (this.imports[path] != null && !overwrite) {\n        debug.warn(`Overwriting ${path} with`, target);\n      }\n      this.imports[path] = target;\n      if (\n        (path.startsWith('blots/') || path.startsWith('formats/')) &&\n        target &&\n        typeof target !== 'boolean' &&\n        target.blotName !== 'abstract'\n      ) {\n        globalRegistry.register(target);\n      }\n      if (typeof target.register === 'function') {\n        target.register(globalRegistry);\n      }\n    }\n  }\n\n  container: HTMLElement;\n  root: HTMLDivElement;\n  scroll: Scroll;\n  emitter: Emitter;\n  protected allowReadOnlyEdits: boolean;\n  editor: Editor;\n  composition: Composition;\n  selection: Selection;\n\n  theme: Theme;\n  keyboard: Keyboard;\n  clipboard: Clipboard;\n  history: History;\n  uploader: Uploader;\n\n  options: ExpandedQuillOptions;\n\n  constructor(container: HTMLElement | string, options: QuillOptions = {}) {\n    this.options = expandConfig(container, options);\n    this.container = this.options.container;\n    if (this.container == null) {\n      debug.error('Invalid Quill container', container);\n      return;\n    }\n    if (this.options.debug) {\n      Quill.debug(this.options.debug);\n    }\n    const html = this.container.innerHTML.trim();\n    this.container.classList.add('ql-container');\n    this.container.innerHTML = '';\n    instances.set(this.container, this);\n    this.root = this.addContainer('ql-editor');\n    this.root.classList.add('ql-blank');\n    this.emitter = new Emitter();\n    const scrollBlotName = Parchment.ScrollBlot.blotName;\n    const ScrollBlot = this.options.registry.query(scrollBlotName);\n    if (!ScrollBlot || !('blotName' in ScrollBlot)) {\n      throw new Error(\n        `Cannot initialize Quill without \"${scrollBlotName}\" blot`,\n      );\n    }\n    this.scroll = new ScrollBlot(this.options.registry, this.root, {\n      emitter: this.emitter,\n    }) as Scroll;\n    this.editor = new Editor(this.scroll);\n    this.selection = new Selection(this.scroll, this.emitter);\n    this.composition = new Composition(this.scroll, this.emitter);\n    this.theme = new this.options.theme(this, this.options); // eslint-disable-line new-cap\n    this.keyboard = this.theme.addModule('keyboard');\n    this.clipboard = this.theme.addModule('clipboard');\n    this.history = this.theme.addModule('history');\n    this.uploader = this.theme.addModule('uploader');\n    this.theme.addModule('input');\n    this.theme.addModule('uiNode');\n    this.theme.init();\n    this.emitter.on(Emitter.events.EDITOR_CHANGE, (type) => {\n      if (type === Emitter.events.TEXT_CHANGE) {\n        this.root.classList.toggle('ql-blank', this.editor.isBlank());\n      }\n    });\n    this.emitter.on(Emitter.events.SCROLL_UPDATE, (source, mutations) => {\n      const oldRange = this.selection.lastRange;\n      const [newRange] = this.selection.getRange();\n      const selectionInfo =\n        oldRange && newRange ? { oldRange, newRange } : undefined;\n      modify.call(\n        this,\n        () => this.editor.update(null, mutations, selectionInfo),\n        source,\n      );\n    });\n    this.emitter.on(Emitter.events.SCROLL_EMBED_UPDATE, (blot, delta) => {\n      const oldRange = this.selection.lastRange;\n      const [newRange] = this.selection.getRange();\n      const selectionInfo =\n        oldRange && newRange ? { oldRange, newRange } : undefined;\n      modify.call(\n        this,\n        () => {\n          const change = new Delta()\n            .retain(blot.offset(this))\n            .retain({ [blot.statics.blotName]: delta });\n          return this.editor.update(change, [], selectionInfo);\n        },\n        Quill.sources.USER,\n      );\n    });\n    if (html) {\n      const contents = this.clipboard.convert({\n        html: `${html}<p><br></p>`,\n        text: '\\n',\n      });\n      this.setContents(contents);\n    }\n    this.history.clear();\n    if (this.options.placeholder) {\n      this.root.setAttribute('data-placeholder', this.options.placeholder);\n    }\n    if (this.options.readOnly) {\n      this.disable();\n    }\n    this.allowReadOnlyEdits = false;\n  }\n\n  addContainer(container: string, refNode?: Node | null): HTMLDivElement;\n  addContainer(container: HTMLElement, refNode?: Node | null): HTMLElement;\n  addContainer(\n    container: string | HTMLElement,\n    refNode: Node | null = null,\n  ): HTMLDivElement | HTMLElement {\n    if (typeof container === 'string') {\n      const className = container;\n      container = document.createElement('div');\n      container.classList.add(className);\n    }\n    this.container.insertBefore(container, refNode);\n    return container;\n  }\n\n  blur() {\n    this.selection.setRange(null);\n  }\n\n  deleteText(range: Range, source?: EmitterSource): Delta;\n  deleteText(index: number, length: number, source?: EmitterSource): Delta;\n  deleteText(\n    index: number | Range,\n    length?: number | EmitterSource,\n    source?: EmitterSource,\n  ): Delta {\n    // @ts-expect-error\n    [index, length, , source] = overload(index, length, source);\n    return modify.call(\n      this,\n      () => {\n        return this.editor.deleteText(index, length);\n      },\n      source,\n      index,\n      -1 * length,\n    );\n  }\n\n  disable() {\n    this.enable(false);\n  }\n\n  editReadOnly<T>(modifier: () => T): T {\n    this.allowReadOnlyEdits = true;\n    const value = modifier();\n    this.allowReadOnlyEdits = false;\n    return value;\n  }\n\n  enable(enabled = true) {\n    this.scroll.enable(enabled);\n    this.container.classList.toggle('ql-disabled', !enabled);\n  }\n\n  focus(options: { preventScroll?: boolean } = {}) {\n    this.selection.focus();\n    if (!options.preventScroll) {\n      this.scrollSelectionIntoView();\n    }\n  }\n\n  format(\n    name: string,\n    value: unknown,\n    source: EmitterSource = Emitter.sources.API,\n  ): Delta {\n    return modify.call(\n      this,\n      () => {\n        const range = this.getSelection(true);\n        let change = new Delta();\n        if (range == null) return change;\n        if (this.scroll.query(name, Parchment.Scope.BLOCK)) {\n          change = this.editor.formatLine(range.index, range.length, {\n            [name]: value,\n          });\n        } else if (range.length === 0) {\n          this.selection.format(name, value);\n          return change;\n        } else {\n          change = this.editor.formatText(range.index, range.length, {\n            [name]: value,\n          });\n        }\n        this.setSelection(range, Emitter.sources.SILENT);\n        return change;\n      },\n      source,\n    );\n  }\n\n  formatLine(\n    index: number,\n    length: number,\n    formats: Record<string, unknown>,\n    source?: EmitterSource,\n  ): Delta;\n  formatLine(\n    index: number,\n    length: number,\n    name: string,\n    value?: unknown,\n    source?: EmitterSource,\n  ): Delta;\n  formatLine(\n    index: number,\n    length: number,\n    name: string | Record<string, unknown>,\n    value?: unknown | EmitterSource,\n    source?: EmitterSource,\n  ): Delta {\n    let formats: Record<string, unknown>;\n    // eslint-disable-next-line prefer-const\n    [index, length, formats, source] = overload(\n      index,\n      length,\n      // @ts-expect-error\n      name,\n      value,\n      source,\n    );\n    return modify.call(\n      this,\n      () => {\n        return this.editor.formatLine(index, length, formats);\n      },\n      source,\n      index,\n      0,\n    );\n  }\n\n  formatText(\n    range: Range,\n    name: string,\n    value: unknown,\n    source?: EmitterSource,\n  ): Delta;\n  formatText(\n    index: number,\n    length: number,\n    name: string,\n    value: unknown,\n    source?: EmitterSource,\n  ): Delta;\n  formatText(\n    index: number,\n    length: number,\n    formats: Record<string, unknown>,\n    source?: EmitterSource,\n  ): Delta;\n  formatText(\n    index: number | Range,\n    length: number | string,\n    name: string | unknown,\n    value?: unknown | EmitterSource,\n    source?: EmitterSource,\n  ): Delta {\n    let formats: Record<string, unknown>;\n    // eslint-disable-next-line prefer-const\n    [index, length, formats, source] = overload(\n      // @ts-expect-error\n      index,\n      length,\n      name,\n      value,\n      source,\n    );\n    return modify.call(\n      this,\n      () => {\n        return this.editor.formatText(index, length, formats);\n      },\n      source,\n      index,\n      0,\n    );\n  }\n\n  getBounds(index: number | Range, length = 0): Bounds | null {\n    let bounds: Bounds | null = null;\n    if (typeof index === 'number') {\n      bounds = this.selection.getBounds(index, length);\n    } else {\n      bounds = this.selection.getBounds(index.index, index.length);\n    }\n    if (!bounds) return null;\n    const containerBounds = this.container.getBoundingClientRect();\n    return {\n      bottom: bounds.bottom - containerBounds.top,\n      height: bounds.height,\n      left: bounds.left - containerBounds.left,\n      right: bounds.right - containerBounds.left,\n      top: bounds.top - containerBounds.top,\n      width: bounds.width,\n    };\n  }\n\n  getContents(index = 0, length = this.getLength() - index) {\n    [index, length] = overload(index, length);\n    return this.editor.getContents(index, length);\n  }\n\n  getFormat(index?: number, length?: number): { [format: string]: unknown };\n  getFormat(range?: Range): {\n    [format: string]: unknown;\n  };\n  getFormat(\n    index: Range | number = this.getSelection(true),\n    length = 0,\n  ): { [format: string]: unknown } {\n    if (typeof index === 'number') {\n      return this.editor.getFormat(index, length);\n    }\n    return this.editor.getFormat(index.index, index.length);\n  }\n\n  getIndex(blot: Parchment.Blot) {\n    return blot.offset(this.scroll);\n  }\n\n  getLength() {\n    return this.scroll.length();\n  }\n\n  getLeaf(index: number) {\n    return this.scroll.leaf(index);\n  }\n\n  getLine(index: number) {\n    return this.scroll.line(index);\n  }\n\n  getLines(range: Range): (Block | BlockEmbed)[];\n  getLines(index?: number, length?: number): (Block | BlockEmbed)[];\n  getLines(\n    index: Range | number = 0,\n    length = Number.MAX_VALUE,\n  ): (Block | BlockEmbed)[] {\n    if (typeof index !== 'number') {\n      return this.scroll.lines(index.index, index.length);\n    }\n    return this.scroll.lines(index, length);\n  }\n\n  getModule(name: string) {\n    return this.theme.modules[name];\n  }\n\n  getSelection(focus: true): Range;\n  getSelection(focus?: boolean): Range | null;\n  getSelection(focus = false): Range | null {\n    if (focus) this.focus();\n    this.update(); // Make sure we access getRange with editor in consistent state\n    return this.selection.getRange()[0];\n  }\n\n  getSemanticHTML(range: Range): string;\n  getSemanticHTML(index?: number, length?: number): string;\n  getSemanticHTML(index: Range | number = 0, length?: number) {\n    if (typeof index === 'number') {\n      length = length ?? this.getLength() - index;\n    }\n    // @ts-expect-error\n    [index, length] = overload(index, length);\n    return this.editor.getHTML(index, length);\n  }\n\n  getText(range?: Range): string;\n  getText(index?: number, length?: number): string;\n  getText(index: Range | number = 0, length?: number): string {\n    if (typeof index === 'number') {\n      length = length ?? this.getLength() - index;\n    }\n    // @ts-expect-error\n    [index, length] = overload(index, length);\n    return this.editor.getText(index, length);\n  }\n\n  hasFocus() {\n    return this.selection.hasFocus();\n  }\n\n  insertEmbed(\n    index: number,\n    embed: string,\n    value: unknown,\n    source: EmitterSource = Quill.sources.API,\n  ): Delta {\n    return modify.call(\n      this,\n      () => {\n        return this.editor.insertEmbed(index, embed, value);\n      },\n      source,\n      index,\n    );\n  }\n\n  insertText(index: number, text: string, source?: EmitterSource): Delta;\n  insertText(\n    index: number,\n    text: string,\n    formats: Record<string, unknown>,\n    source?: EmitterSource,\n  ): Delta;\n  insertText(\n    index: number,\n    text: string,\n    name: string,\n    value: unknown,\n    source?: EmitterSource,\n  ): Delta;\n  insertText(\n    index: number,\n    text: string,\n    name?: string | Record<string, unknown> | EmitterSource,\n    value?: unknown,\n    source?: EmitterSource,\n  ): Delta {\n    let formats: Record<string, unknown>;\n    // eslint-disable-next-line prefer-const\n    // @ts-expect-error\n    [index, , formats, source] = overload(index, 0, name, value, source);\n    return modify.call(\n      this,\n      () => {\n        return this.editor.insertText(index, text, formats);\n      },\n      source,\n      index,\n      text.length,\n    );\n  }\n\n  isEnabled() {\n    return this.scroll.isEnabled();\n  }\n\n  off(...args: Parameters<(typeof Emitter)['prototype']['off']>) {\n    return this.emitter.off(...args);\n  }\n\n  on(\n    event: (typeof Emitter)['events']['TEXT_CHANGE'],\n    handler: (delta: Delta, oldContent: Delta, source: EmitterSource) => void,\n  ): Emitter;\n  on(\n    event: (typeof Emitter)['events']['SELECTION_CHANGE'],\n    handler: (range: Range, oldRange: Range, source: EmitterSource) => void,\n  ): Emitter;\n  on(\n    event: (typeof Emitter)['events']['EDITOR_CHANGE'],\n    handler: (\n      ...args:\n        | [\n            (typeof Emitter)['events']['TEXT_CHANGE'],\n            Delta,\n            Delta,\n            EmitterSource,\n          ]\n        | [\n            (typeof Emitter)['events']['SELECTION_CHANGE'],\n            Range,\n            Range,\n            EmitterSource,\n          ]\n    ) => void,\n  ): Emitter;\n  on(event: string, ...args: unknown[]): Emitter;\n  on(...args: Parameters<(typeof Emitter)['prototype']['on']>): Emitter {\n    return this.emitter.on(...args);\n  }\n\n  once(...args: Parameters<(typeof Emitter)['prototype']['once']>) {\n    return this.emitter.once(...args);\n  }\n\n  removeFormat(index: number, length: number, source?: EmitterSource): Delta {\n    [index, length, , source] = overload(index, length, source);\n    return modify.call(\n      this,\n      () => {\n        return this.editor.removeFormat(index, length);\n      },\n      source,\n      index,\n    );\n  }\n\n  scrollRectIntoView(rect: Rect) {\n    scrollRectIntoView(this.root, rect);\n  }\n\n  /**\n   * @deprecated Use Quill#scrollSelectionIntoView() instead.\n   */\n  scrollIntoView() {\n    console.warn(\n      'Quill#scrollIntoView() has been deprecated and will be removed in the near future. Please use Quill#scrollSelectionIntoView() instead.',\n    );\n    this.scrollSelectionIntoView();\n  }\n\n  /**\n   * Scroll the current selection into the visible area.\n   * If the selection is already visible, no scrolling will occur.\n   */\n  scrollSelectionIntoView() {\n    const range = this.selection.lastRange;\n    const bounds = range && this.selection.getBounds(range.index, range.length);\n    if (bounds) {\n      this.scrollRectIntoView(bounds);\n    }\n  }\n\n  setContents(\n    delta: Delta | Op[],\n    source: EmitterSource = Emitter.sources.API,\n  ): Delta {\n    return modify.call(\n      this,\n      () => {\n        delta = new Delta(delta);\n        const length = this.getLength();\n        // Quill will set empty editor to \\n\n        const delete1 = this.editor.deleteText(0, length);\n        const applied = this.editor.insertContents(0, delta);\n        // Remove extra \\n from empty editor initialization\n        const delete2 = this.editor.deleteText(this.getLength() - 1, 1);\n        return delete1.compose(applied).compose(delete2);\n      },\n      source,\n    );\n  }\n  setSelection(range: Range | null, source?: EmitterSource): void;\n  setSelection(index: number, source?: EmitterSource): void;\n  setSelection(index: number, length?: number, source?: EmitterSource): void;\n  setSelection(index: number, source?: EmitterSource): void;\n  setSelection(\n    index: Range | null | number,\n    length?: EmitterSource | number,\n    source?: EmitterSource,\n  ): void {\n    if (index == null) {\n      // @ts-expect-error https://github.com/microsoft/TypeScript/issues/22609\n      this.selection.setRange(null, length || Quill.sources.API);\n    } else {\n      // @ts-expect-error\n      [index, length, , source] = overload(index, length, source);\n      this.selection.setRange(new Range(Math.max(0, index), length), source);\n      if (source !== Emitter.sources.SILENT) {\n        this.scrollSelectionIntoView();\n      }\n    }\n  }\n\n  setText(text: string, source: EmitterSource = Emitter.sources.API) {\n    const delta = new Delta().insert(text);\n    return this.setContents(delta, source);\n  }\n\n  update(source: EmitterSource = Emitter.sources.USER) {\n    const change = this.scroll.update(source); // Will update selection before selection.update() does if text changes\n    this.selection.update(source);\n    // TODO this is usually undefined\n    return change;\n  }\n\n  updateContents(\n    delta: Delta | Op[],\n    source: EmitterSource = Emitter.sources.API,\n  ): Delta {\n    return modify.call(\n      this,\n      () => {\n        delta = new Delta(delta);\n        return this.editor.applyDelta(delta);\n      },\n      source,\n      true,\n    );\n  }\n}\n\nfunction resolveSelector(selector: string | HTMLElement | null | undefined) {\n  return typeof selector === 'string'\n    ? document.querySelector<HTMLElement>(selector)\n    : selector;\n}\n\nfunction expandModuleConfig(config: Record<string, unknown> | undefined) {\n  return Object.entries(config ?? {}).reduce(\n    (expanded, [key, value]) => ({\n      ...expanded,\n      [key]: value === true ? {} : value,\n    }),\n    {} as Record<string, unknown>,\n  );\n}\n\nfunction omitUndefinedValuesFromOptions(obj: QuillOptions) {\n  return Object.fromEntries(\n    Object.entries(obj).filter((entry) => entry[1] !== undefined),\n  );\n}\n\nfunction expandConfig(\n  containerOrSelector: HTMLElement | string,\n  options: QuillOptions,\n): ExpandedQuillOptions {\n  const container = resolveSelector(containerOrSelector);\n  if (!container) {\n    throw new Error('Invalid Quill container');\n  }\n\n  const shouldUseDefaultTheme =\n    !options.theme || options.theme === Quill.DEFAULTS.theme;\n  const theme = shouldUseDefaultTheme\n    ? Theme\n    : Quill.import(`themes/${options.theme}`);\n  if (!theme) {\n    throw new Error(`Invalid theme ${options.theme}. Did you register it?`);\n  }\n\n  const { modules: quillModuleDefaults, ...quillDefaults } = Quill.DEFAULTS;\n  const { modules: themeModuleDefaults, ...themeDefaults } = theme.DEFAULTS;\n\n  let userModuleOptions = expandModuleConfig(options.modules);\n  // Special case toolbar shorthand\n  if (\n    userModuleOptions != null &&\n    userModuleOptions.toolbar &&\n    userModuleOptions.toolbar.constructor !== Object\n  ) {\n    userModuleOptions = {\n      ...userModuleOptions,\n      toolbar: { container: userModuleOptions.toolbar },\n    };\n  }\n\n  const modules: ExpandedQuillOptions['modules'] = merge(\n    {},\n    expandModuleConfig(quillModuleDefaults),\n    expandModuleConfig(themeModuleDefaults),\n    userModuleOptions,\n  );\n\n  const config = {\n    ...quillDefaults,\n    ...omitUndefinedValuesFromOptions(themeDefaults),\n    ...omitUndefinedValuesFromOptions(options),\n  };\n\n  let registry = options.registry;\n  if (registry) {\n    if (options.formats) {\n      debug.warn('Ignoring \"formats\" option because \"registry\" is specified');\n    }\n  } else {\n    registry = options.formats\n      ? createRegistryWithFormats(options.formats, config.registry, debug)\n      : config.registry;\n  }\n\n  return {\n    ...config,\n    registry,\n    container,\n    theme,\n    modules: Object.entries(modules).reduce(\n      (modulesWithDefaults, [name, value]) => {\n        if (!value) return modulesWithDefaults;\n\n        const moduleClass = Quill.import(`modules/${name}`);\n        if (moduleClass == null) {\n          debug.error(\n            `Cannot load ${name} module. Are you sure you registered it?`,\n          );\n          return modulesWithDefaults;\n        }\n        return {\n          ...modulesWithDefaults,\n          // @ts-expect-error\n          [name]: merge({}, moduleClass.DEFAULTS || {}, value),\n        };\n      },\n      {},\n    ),\n    bounds: resolveSelector(config.bounds),\n  };\n}\n\n// Handle selection preservation and TEXT_CHANGE emission\n// common to modification APIs\nfunction modify(\n  modifier: () => Delta,\n  source: EmitterSource,\n  index: number | boolean,\n  shift: number | null,\n) {\n  if (\n    !this.isEnabled() &&\n    source === Emitter.sources.USER &&\n    !this.allowReadOnlyEdits\n  ) {\n    return new Delta();\n  }\n  let range = index == null ? null : this.getSelection();\n  const oldDelta = this.editor.delta;\n  const change = modifier();\n  if (range != null) {\n    if (index === true) {\n      index = range.index; // eslint-disable-line prefer-destructuring\n    }\n    if (shift == null) {\n      range = shiftRange(range, change, source);\n    } else if (shift !== 0) {\n      // @ts-expect-error index should always be number\n      range = shiftRange(range, index, shift, source);\n    }\n    this.setSelection(range, Emitter.sources.SILENT);\n  }\n  if (change.length() > 0) {\n    const args = [Emitter.events.TEXT_CHANGE, change, oldDelta, source];\n    this.emitter.emit(Emitter.events.EDITOR_CHANGE, ...args);\n    if (source !== Emitter.sources.SILENT) {\n      this.emitter.emit(...args);\n    }\n  }\n  return change;\n}\n\ntype NormalizedIndexLength = [\n  number,\n  number,\n  Record<string, unknown>,\n  EmitterSource,\n];\nfunction overload(index: number, source?: EmitterSource): NormalizedIndexLength;\nfunction overload(\n  index: number,\n  length: number,\n  source?: EmitterSource,\n): NormalizedIndexLength;\nfunction overload(\n  index: number,\n  length: number,\n  format: string,\n  value: unknown,\n  source?: EmitterSource,\n): NormalizedIndexLength;\nfunction overload(\n  index: number,\n  length: number,\n  format: Record<string, unknown>,\n  source?: EmitterSource,\n): NormalizedIndexLength;\nfunction overload(range: Range, source?: EmitterSource): NormalizedIndexLength;\nfunction overload(\n  range: Range,\n  format: string,\n  value: unknown,\n  source?: EmitterSource,\n): NormalizedIndexLength;\nfunction overload(\n  range: Range,\n  format: Record<string, unknown>,\n  source?: EmitterSource,\n): NormalizedIndexLength;\nfunction overload(\n  index: Range | number,\n  length?: number | string | Record<string, unknown> | EmitterSource,\n  name?: string | unknown | Record<string, unknown> | EmitterSource,\n  value?: unknown | EmitterSource,\n  source?: EmitterSource,\n): NormalizedIndexLength {\n  let formats: Record<string, unknown> = {};\n  // @ts-expect-error\n  if (typeof index.index === 'number' && typeof index.length === 'number') {\n    // Allow for throwaway end (used by insertText/insertEmbed)\n    if (typeof length !== 'number') {\n      // @ts-expect-error\n      source = value;\n      value = name;\n      name = length;\n      // @ts-expect-error\n      length = index.length; // eslint-disable-line prefer-destructuring\n      // @ts-expect-error\n      index = index.index; // eslint-disable-line prefer-destructuring\n    } else {\n      // @ts-expect-error\n      length = index.length; // eslint-disable-line prefer-destructuring\n      // @ts-expect-error\n      index = index.index; // eslint-disable-line prefer-destructuring\n    }\n  } else if (typeof length !== 'number') {\n    // @ts-expect-error\n    source = value;\n    value = name;\n    name = length;\n    length = 0;\n  }\n  // Handle format being object, two format name/value strings or excluded\n  if (typeof name === 'object') {\n    // @ts-expect-error Fix me later\n    formats = name;\n    // @ts-expect-error\n    source = value;\n  } else if (typeof name === 'string') {\n    if (value != null) {\n      formats[name] = value;\n    } else {\n      // @ts-expect-error\n      source = name;\n    }\n  }\n  // Handle optional source\n  source = source || Emitter.sources.API;\n  // @ts-expect-error\n  return [index, length, formats, source];\n}\n\nfunction shiftRange(range: Range, change: Delta, source?: EmitterSource): Range;\nfunction shiftRange(\n  range: Range,\n  index: number,\n  length?: number,\n  source?: EmitterSource,\n): Range;\nfunction shiftRange(\n  range: Range,\n  index: number | Delta,\n  lengthOrSource?: number | EmitterSource,\n  source?: EmitterSource,\n) {\n  const length = typeof lengthOrSource === 'number' ? lengthOrSource : 0;\n  if (range == null) return null;\n  let start;\n  let end;\n  // @ts-expect-error -- TODO: add a better type guard around `index`\n  if (index && typeof index.transformPosition === 'function') {\n    [start, end] = [range.index, range.index + range.length].map((pos) =>\n      // @ts-expect-error -- TODO: add a better type guard around `index`\n      index.transformPosition(pos, source !== Emitter.sources.USER),\n    );\n  } else {\n    [start, end] = [range.index, range.index + range.length].map((pos) => {\n      // @ts-expect-error -- TODO: add a better type guard around `index`\n      if (pos < index || (pos === index && source === Emitter.sources.USER))\n        return pos;\n      if (length >= 0) {\n        return pos + length;\n      }\n      // @ts-expect-error -- TODO: add a better type guard around `index`\n      return Math.max(index, pos + length);\n    });\n  }\n  return new Range(start, end - start);\n}\n\nexport type { Bounds, DebugLevel, EmitterSource };\nexport { Parchment, Range };\n\nexport { globalRegistry, expandConfig, overload, Quill as default };\n"],"mappings":"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","ignoreList":[]}]}